
{% macro makeNestedObjectForType type %}
    {% for variable in type.variables|stored %}
        {% if variable.type.implements.AutoTestInitializer %}
            {% call makeObjectForType variable.type variable.name variable.typeName.unwrappedTypeName %}
        {% elif variable.typeName.isArray %} 
            {% if variable.typeName.array.elementType.implements.AutoTestInitializer %}
                {% call makeObjectForType variable.typeName.array.elementType variable.name variable.typeName.array.elementTypeName %}
            {% elif variable.typeName.array.elementTypeName.name|hasPrefix:"String" %}
                let {{variable.name}}_{{variable.typeName.array.elementTypeName}} = "{{variable.name}}"
            {% elif variable.typeName.array.elementTypeName.name|hasPrefix:"Int" %}
                let {{variable.name}}_{{variable.typeName.array.elementTypeName}} = 1
            {% endif %}
        {% endif %}
    {% endfor %}
{% endmacro %}

{% macro makeObjectForType type variableName typeNameId %}
    {% if typeNameId %}
    func make_{{variableName}}_{{typeNameId}}() -> {{type.name}} {
            {% call makeNestedObjectForType type %}
        return {{type.name}}({% for variable in type.variables|stored %}
            {{variable.name}}: {% call makeTestValueForVariable variable %}{%if not forloop.last %}, {%endif%}
        {% endfor %}
        )
    }
        let {{variableName}}_{{typeNameId}} = make_{{variableName}}_{{typeNameId}}()
    {% else %}
         {% call makeNestedObjectForType type %}
            let {{variableName}}_{{typeNameId}} = {{type.name}}({% for variable in type.variables|stored %}
            {{variable.name}}: {% call makeTestValueForVariable variable %}{%if not forloop.last %}, {%endif%}
        {% endfor %}
        )
    {% endif %}

{% endmacro %}

{% macro makeTestValueForVariable variable %}{% if variable.typeName|hasPrefix:"String" %}"{{variable.name}}"{% elif variable.typeName|hasPrefix:"Bool"%}true{% elif variable.type|enum %}.{{variable.type.cases[0].name}}{% elif variable.typeName|hasPrefix:"Int"%}1{% elif variable.typeName|hasPrefix:"Double"%}1{% elif variable.typeName|hasPrefix:"CGFloat"%}1{% elif variable.type.implementing.AutoTestInitializer %} {{variable.name}}_{{variable.typeName.unwrappedTypeName}}{% elif variable.typeName.isArray %}[{{variable.name}}_{{variable.typeName.array.elementTypeName}}]{% elif variable.typeName|contains:":" %}[:]{% endif %}{% endmacro %}

import XCTest
@testable import BusinessModel

class TestInitializer: XCTestCase {


{% for type in types.implementing.AutoTestInitializer %}
    func test{{type.name}}() {
        {% call makeObjectForType type "testObject" "" %}
        {% for variable in type.variables|stored %}
            XCTAssertEqual(testObject_.{{variable.name}},{% call makeTestValueForVariable variable %})
        {% endfor %}
    }
    
{%endfor%}
}
